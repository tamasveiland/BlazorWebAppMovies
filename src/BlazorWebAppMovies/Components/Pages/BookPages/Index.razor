@page "/books"
@rendermode InteractiveServer
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using BlazorWebAppMovies.Models
@using BlazorWebAppMovies.Data
@implements IAsyncDisposable
@inject IDbContextFactory<BlazorWebAppMovies.Data.BlazorWebAppMoviesContext> DbFactory

<PageTitle>Book Inventory</PageTitle>

<h1>Book Inventory</h1>

<div>
    <input type="search" @bind="titleFilter" @bind:event="oninput" />
</div>

<p>
    <a href="books/create">Add New Book</a>
</p>

<div>
    <QuickGrid Class="table" Items="FilteredBooks" Pagination="pagination">
        <PropertyColumn Property="book => book.Title" Sortable="true" />
        <PropertyColumn Property="book => book.Author" Title="Author" />
        <PropertyColumn Property="book => book.PublicationDate" Title="Publication Date" />
        <PropertyColumn Property="book => book.Genre" />
        <PropertyColumn Property="book => book.Price" />

        <TemplateColumn Context="book">
            <a href="@($"books/edit?id={book.Id}")">Edit</a> |
            <a href="@($"books/details?id={book.Id}")">Details</a> |
            <a href="@($"books/delete?id={book.Id}")">Delete</a>
        </TemplateColumn>
    </QuickGrid>
</div>

<Paginator State="pagination" />

@code {
    private BlazorWebAppMoviesContext context = default!;
    private PaginationState pagination = new PaginationState { ItemsPerPage = 5 };
    private string titleFilter = string.Empty;

    private IQueryable<Book> FilteredBooks =>
        context.Book.Where(b => b.Title!.Contains(titleFilter));

    protected override void OnInitialized()
    {
        context = DbFactory.CreateDbContext();
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}
